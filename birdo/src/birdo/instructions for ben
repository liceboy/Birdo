~Instructions for Ben~

We've made enough enemies, it's time to make them into neat patterns.
First, make a new class. pattern.java?
Using Scanner, we are going to read a text file and input patterns.
I'm going to be perfectly honest, I've never done it this way.

  InputStream in = getClass().getResourceAsStream("/patterns.txt"); 
  // this creates an InputStream based on a txt file in the directory
  // this also allows for the game to function in a jar file

  Scanner sc = new Scanner(in)
  // creates a scanner from that input stream

Apparently that Scanner can be used to process input streams.
I literally have never tried this so you are going to try it for me.
If it doesn't work... we can use Buffered Reader instead.
  
  BufferedReader b = new BufferedReader(new InputStreamReader(in));
  // creates a buffered reader from that input stream
  
Once we can actually read from a file, that's where the magic begins.
I've been over this before, the txt file structure is as follows.

  <name of pattern>
  <name of enemy> <x> <y> (spaces between each value)
  <name of enemy> <x> <y> (more values might be needed, idk)
  ...
  (blank line, which is at the end of the pattern)
  <name of pattern>
  ...
  
When a pattern object is created, its parameter will be a pattern name.
Once the class is initialized, it will have an ArrayList of enemies.
This ArrayList can be added to the main enemy ArrayList.
The class, using Scanner/BufferedReader, combs through the text file...
... finds the pattern it needs to build...
... reads each line after the name of the pattern...
... uses String.split(" ") to create a String array of values...
... creates an enemy using those values (remember Integer.parseInt)...
... adds that enemy to an enemy ArrayList
... continues until a blank line is encountered at the end of the pattern...

Sounds easy? You got this.
If you need help, interrupt me while I work on my AP Lang test prep.
